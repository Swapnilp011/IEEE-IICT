/**
 * @fileoverview Firestore Security Rules for the IEEE Student Branch app.
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of use and rapid prototyping, focusing on authorization rather than extensive data validation.
 * All collections are publicly readable, but writes are restricted to prevent unauthorized data modification.
 *
 * Data Structure:
 * - /events/{eventId}: Stores event information.
 * - /gallery_albums/{albumId}: Stores gallery album information.
 * - /team_members/{memberId}: Stores team member information.
 * - /contact_messages/{messageId}: Stores contact messages submitted through the contact form.
 *
 * Key Security Decisions:
 * - Public Read Access: All collections are publicly readable to simplify data display and exploration.
 * - Restricted Writes: All write operations (create, update, delete) require authentication. Further authorization checks may be needed.
 * - No User Listing: Listing of users is not supported.
 * - Denormalization: Data required for authorization (e.g., ownership) should be denormalized directly onto the documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read events, but requires authentication for creating, updating, and deleting events.
     * @path /events/{eventId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn(); Example: Authenticated user creates a new event.
     * @deny (create): if !isSignedIn(); Example: Unauthenticated user attempts to create an event.
     * @allow (update): if isSignedIn(); Example: Authenticated user updates an existing event.
     * @deny (update): if !isSignedIn(); Example: Unauthenticated user attempts to update an event.
     * @allow (delete): if isSignedIn(); Example: Authenticated user deletes an existing event.
     * @deny (delete): if !isSignedIn(); Example: Unauthenticated user attempts to delete an event.
     * @principle Allows public read access while restricting write access to authenticated users. Further authorization checks may be needed on write.
     */
    match /events/{eventId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read gallery albums, but requires authentication for creating, updating, and deleting albums.
     * @path /gallery_albums/{albumId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn(); Example: Authenticated user creates a new gallery album.
     * @deny (create): if !isSignedIn(); Example: Unauthenticated user attempts to create an event.
     * @allow (update): if isSignedIn(); Example: Authenticated user updates an existing gallery album.
     * @deny (update): if !isSignedIn(); Example: Unauthenticated user attempts to update an event.
     * @allow (delete): if isSignedIn(); Example: Authenticated user deletes an existing gallery album.
     * @deny (delete): if !isSignedIn(); Example: Unauthenticated user attempts to delete an event.
     * @principle Allows public read access while restricting write access to authenticated users. Further authorization checks may be needed on write.
     */
    match /gallery_albums/{albumId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read team members, but requires authentication for creating, updating, and deleting team members.
     * @path /team_members/{memberId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn(); Example: Authenticated user creates a new team member.
     * @deny (create): if !isSignedIn(); Example: Unauthenticated user attempts to create an event.
     * @allow (update): if isSignedIn(); Example: Authenticated user updates an existing team member.
     * @deny (update): if !isSignedIn(); Example: Unauthenticated user attempts to update an event.
     * @allow (delete): if isSignedIn(); Example: Authenticated user deletes an existing team member.
     * @deny (delete): if !isSignedIn(); Example: Unauthenticated user attempts to delete an event.
     * @principle Allows public read access while restricting write access to authenticated users. Further authorization checks may be needed on write.
     */
    match /team_members/{memberId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows anyone to read contact messages, but requires authentication for creating, updating, and deleting messages.
     * @path /contact_messages/{messageId}
     * @allow (get, list): if true;
     * @allow (create): if isSignedIn(); Example: Authenticated user creates a new contact message.
     * @deny (create): if !isSignedIn(); Example: Unauthenticated user attempts to create an event.
     * @allow (update): if isSignedIn(); Example: Authenticated user updates an existing contact message.
     * @deny (update): if !isSignedIn(); Example: Unauthenticated user attempts to update an event.
     * @allow (delete): if isSignedIn(); Example: Authenticated user deletes an existing contact message.
     * @deny (delete): if !isSignedIn(); Example: Unauthenticated user attempts to delete an event.
     * @principle Allows public read access while restricting write access to authenticated users. Further authorization checks may be needed on write.
     */
    match /contact_messages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    function isSignedIn() {
      return request.auth != null;
    }
  }
}