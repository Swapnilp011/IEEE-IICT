{
  "entities": {
    "Event": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Event",
      "type": "object",
      "description": "Represents an event organized by the IEEE Student Branch.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the event."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "date": {
          "type": "string",
          "description": "The date and time of the event.",
          "format": "date-time"
        },
        "category": {
          "type": "string",
          "description": "The category of the event (e.g., workshop, seminar)."
        },
        "description": {
          "type": "string",
          "description": "A brief description of the event."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the image associated with the event.",
          "format": "uri"
        },
        "registrationUrl": {
          "type": "string",
          "description": "URL for event registration.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "title",
        "date",
        "category",
        "description",
        "imageUrl",
        "registrationUrl"
      ]
    },
    "GalleryAlbum": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GalleryAlbum",
      "type": "object",
      "description": "Represents an album in the gallery.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the gallery album."
        },
        "title": {
          "type": "string",
          "description": "The title of the album."
        },
        "description": {
          "type": "string",
          "description": "A description of the album."
        },
        "imageUrls": {
          "type": "array",
          "description": "URLs of the images in the album.",
          "items": {
            "type": "string"
          }
        },
        "category": {
          "type": "string",
          "description": "The category of the album."
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "imageUrls",
        "category"
      ]
    },
    "TeamMember": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TeamMember",
      "type": "object",
      "description": "Represents a member of the IEEE Student Branch team.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the team member."
        },
        "name": {
          "type": "string",
          "description": "The name of the team member."
        },
        "role": {
          "type": "string",
          "description": "The role of the team member (e.g., President, Vice President)."
        },
        "bio": {
          "type": "string",
          "description": "A brief biography of the team member."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the team member's photo.",
          "format": "uri"
        },
        "linkedinUrl": {
          "type": "string",
          "description": "URL to the team member's LinkedIn profile.",
          "format": "uri"
        },
        "githubUrl": {
          "type": "string",
          "description": "URL to the team member's GitHub profile.",
          "format": "uri"
        }
      },
      "required": [
        "id",
        "name",
        "role",
        "bio",
        "imageUrl"
      ]
    },
    "ContactMessage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContactMessage",
      "type": "object",
      "description": "Represents a contact message submitted through the contact form.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The full name of the person submitting the message."
        },
        "email": {
          "type": "string",
          "description": "The email address of the person submitting the message.",
          "format": "email"
        },
        "subject": {
          "type": "string",
          "description": "The subject of the message."
        },
        "message": {
          "type": "string",
          "description": "The content of the message."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the message was sent.",
          "format": "date-time"
        }
      },
      "required": [
        "name",
        "email",
        "subject",
        "message",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/events/{eventId}",
        "definition": {
          "entityName": "Event",
          "schema": {
            "$ref": "#/backend/entities/Event"
          },
          "description": "Stores event information.  The eventId is auto-generated.",
          "params": [
            {
              "name": "eventId",
              "description": "The unique identifier for the event."
            }
          ]
        }
      },
      {
        "path": "/gallery_albums/{albumId}",
        "definition": {
          "entityName": "GalleryAlbum",
          "schema": {
            "$ref": "#/backend/entities/GalleryAlbum"
          },
          "description": "Stores gallery album information. The albumId is auto-generated.",
          "params": [
            {
              "name": "albumId",
              "description": "The unique identifier for the gallery album."
            }
          ]
        }
      },
      {
        "path": "/team_members/{memberId}",
        "definition": {
          "entityName": "TeamMember",
          "schema": {
            "$ref": "#/backend/entities/TeamMember"
          },
          "description": "Stores team member information. The memberId is auto-generated.",
          "params": [
            {
              "name": "memberId",
              "description": "The unique identifier for the team member."
            }
          ]
        }
      },
      {
        "path": "/contact_messages/{messageId}",
        "definition": {
          "entityName": "ContactMessage",
          "schema": {
            "$ref": "#/backend/entities/ContactMessage"
          },
          "description": "Stores contact messages submitted through the contact form. The messageId is auto-generated.",
          "params": [
            {
              "name": "messageId",
              "description": "The unique identifier for the contact message."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure Authorization Independence, DBAC, and QAPs. We leverage structural segregation, access modeling and denormalization to achieve those design goals.\n\n1.  **Events:** Events are stored in a flat collection `/events`. There are no subcollections, simplifying access control. Any data needed for list filtering or display is contained directly within each event document, ensuring QAPs.\n2.  **Gallery Albums:** Gallery albums are stored in a flat collection `/gallery_albums`. Each document contains all the necessary data, including image URLs and category, supporting QAPs for listing and filtering.\n3.  **Team Members:** Team members are stored in a flat collection `/team_members`. Each document contains all member information, enabling straightforward listing and display.\n4.  **Contact Messages:** Contact messages are stored in the `/contact_messages` collection.  Access is restricted to authorized users who can manage these messages. The `sentAt` timestamp is included for auditability.\n\nThe structure avoids hierarchical authorization dependencies by ensuring that all necessary data for access control is present within each document, eliminating the need for `get()` calls in security rules.  This supports atomic operations and simplifies debugging.  The use of flat collections promotes homogeneous security postures, making rules easier to write and maintain."
  }
}
